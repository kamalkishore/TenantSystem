@model TenantSystem.Models.TenantMeterReading

@{
    ViewBag.Title = "AddTenantMeterReading";
}

<div class="container-fluid">
<div class="page-header">
<h3>Add Tenant Meter Reading</h3>
</div>
<div id="loading"><img src="~/Content/images/loading.gif" /><br>Loading..</div>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>TenantMeterReading</legend>
                
        <div class="editor-label">
            @Html.LabelFor(model => model.DateOfMeterReading)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DateOfMeterReading)
            @Html.ValidationMessageFor(model => model.DateOfMeterReading)
        </div>

        <div class="editor-label">
            @Html.Label("Tenant")
        </div>

        <div class="editor-field">
            @Html.DropDownList("TenantId", (IEnumerable<SelectListItem>)ViewBag.Tenant, "Select")
            @Html.ValidationMessageFor(model => model.TenantId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MeterId)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MeterId, new { @readonly = "readOnly" })
                
            @Html.ValidationMessageFor(model => model.MeterId)
        </div>

        <div class="editor-lable">
            @Html.LabelFor(model=>model.PreviousMeterReading)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model=>model.PreviousMeterReading, new {@readonly = "readOnly"})
        </div>

        <div class="editor-lable">
            @Html.LabelFor(model=>model.DateOfPreviousMonthMeterReading)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model=>model.DateOfPreviousMonthMeterReading, new {@readonly = "readOnly"})
        </div>

        <div class="editor-label">
            @Html.LabelFor(model=>model.PerUnitPrice)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model=>model.PerUnitPrice,(SelectList)ViewBag.PricePerUnit, "Select")
            @Html.ValidationMessageFor(model=>model.PerUnitPrice)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CurrentMeterReading)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CurrentMeterReading)
            @Html.ValidationMessageFor(model => model.CurrentMeterReading)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AmountPayable)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AmountPayable, new{ @readonly = "readOnly"})
            @Html.ValidationMessageFor(model => model.AmountPayable)
        </div>
        
        <div class="calculated-amount-label">Amount Payable :  </div>
        <div class="calculated-amount">            
            0
        </div>

        <div>

        </div>
        
        <p class="button-margin">
            <input type="submit" value="Add Meter Reading Details" class="btn btn-lg btn-primary" id ="btnSubmit"/>
        </p>
    </fieldset>
}

    <div>
        @Html.ActionLink("Back to List", "Index", "Home")
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/moment")

    <script type="text/javascript">
        $(function () {
            
            $("#DateOfMeterReading").val(sessionStorage["DateOfMeterReading"]);

            $("#DateOfMeterReading").change(function () {
                var selectedDate = new Date($("#DateOfMeterReading").val());
                if (selectedDate > new Date()) {
                    alert("Selected Date Should not be greater than today's date");
                    $("#DateOfMeterReading").val("");
                    return;
                }
            });

            $('#TenantId').change(function () {
                //setTimeout(function () { console.log("time out runs"); }, 3000);
                //$('#loading').html('<img src="loading.gif"> loading...');

                if (this.value) {

                    var options = {
                        url: "GetPreviousMeterReading",
                        type: "get",
                        datatype: "json",
                        data: { Id: this.value },
                        success: function (data) {
                            console.log(data.DateOfMeterReading);
                            $("#PreviousMeterReading").val(data.MeterReading);
                            $("#MeterId").val(data.MeterId);
                            $("#DateOfPreviousMonthMeterReading").val(moment(new Date(parseInt(data.DateOfMeterReading.substr(6)))).format("DD-MMMM-YYYY"));
                            console.log(moment(new Date(parseInt(data.DateOfMeterReading.substr(6)))).format("DD-MMMM-YYYY"));
                            $('#loading').html('loading complete');
                        },
                        error: function (xhr, event) {
                            console.log("ajax error called");
                            console.log(xhr + " " + event);
                            ResetControls();
                        }
                    };

                    $.ajax(options);
                }
                else {
                    ResetControls();
                }
            });

            $('#CurrentMeterReading').keyup(function (e) {
                CalculateAmount();
            });

            $("#PerUnitPrice").change(function () {
                CalculateAmount();
            });

            function CalculateAmount() {
                var perUnit = $('#PerUnitPrice').val();
                var meterReading = $('#CurrentMeterReading').val() - $('#PreviousMeterReading').val();
                console.log(meterReading);
                var calculatedAmount = perUnit * meterReading;
                console.log("Amount payable : " + calculatedAmount);

                $('.calculated-amount').text(meterReading + " * " + perUnit + " : " +calculatedAmount);
                $("#AmountPayable").val(calculatedAmount);

                if (!$.isNumeric(perUnit) && (!$.isNumeric(meterReading)))
                { $('.calculated-amount').text(calculatedAmount); }
            }

            $("#btnSubmit").click(function (e) {
                var dateOfMeterReading = $("#DateOfMeterReading").val();
                sessionStorage.setItem("DateOfMeterReading", dateOfMeterReading);
            });

            function ResetControls() {
                $("#PreviousMeterReading").val("");
                $("#MeterId").val("");
                $("#DateOfPreviousMonthMeterReading").val("");
            }

            $(document).ajaxStart(function () {
                $("#loading").css("display", "block");
            });
            $(document).ajaxComplete(function () {
                $("#loading").css("display", "none");
            });

            //$('#loading')
            //.hide()
            //.ajaxStart(function () {
            //    $(this).show();
            //})
            //.ajaxStop(function () {
            //    $(this).hide();
            //});

        });
</script>
}

