@model TenantSystem.Models.TenantMeterReading

@{
    ViewBag.Title = "AddTenantMeterReading";
}

<h2>AddTenantMeterReading</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>TenantMeterReading</legend>
                
        <div class="editor-label">
            @Html.LabelFor(model => model.DateOfMeterReading)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DateOfMeterReading)
            @Html.ValidationMessageFor(model => model.DateOfMeterReading)
        </div>

        <div class="editor-label">
            @Html.Label("Tenant")
        </div>
        @*@Html.BeginForm("GetPeviousMonthReading","Tenant")
        {*@
            <div class="editor-field">
                @Html.DropDownList("TenantId", (IEnumerable<SelectListItem>)ViewBag.Tenant, "Select")
                @Html.ValidationMessageFor(model => model.TenantId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.MeterId)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.MeterId, new { @readonly = "readOnly" })
                
                @Html.ValidationMessageFor(model => model.MeterId)
            </div>
        @*}*@

        <div class="editor-lable">
            @Html.LabelFor(model=>model.PreviousMeterReading)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model=>model.PreviousMeterReading, new {@readonly = "readOnly"})
        </div>

        <div class="editor-lable">
            @Html.LabelFor(model=>model.DateOfPreviousMonthMeterReading)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model=>model.DateOfPreviousMonthMeterReading, new {@readonly = "readOnly"})
        </div>

        <div class="editor-label">
            @Html.LabelFor(model=>model.PerUnitPrice)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model=>model.PerUnitPrice,(SelectList)ViewBag.PricePerUnit, "Select")
            @Html.ValidationMessageFor(model=>model.PerUnitPrice)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CurrentMeterReading)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CurrentMeterReading)
            @Html.ValidationMessageFor(model => model.CurrentMeterReading)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AmountPayable)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AmountPayable, new{ @readonly = "readOnly"})
            @Html.ValidationMessageFor(model => model.AmountPayable)
        </div>
        
        <div class="calculated-amount-label">Amount Payable :  </div>
        <div class="calculated-amount">            
            0
        </div>

        <div>

        </div>
        
        <p>
            <input type="submit" value="Create" id ="btnSubmit"/>
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
              
            $("#DateOfMeterReading").val(sessionStorage["DateOfMeterReading"]);

            $('#TenantId').change(function () {
                var options = {
                    url: "GetPreviousMeterReading",
                    type : "get",                    
                    datatype: "json",
                    data: { Id: this.value },
                    success: function (data) {
                        console.log(data.DateOfMeterReading);
                        $("#PreviousMeterReading").val(data.MeterReading);
                        $("#MeterId").val(data.MeterId);
                        $("#DateOfPreviousMonthMeterReading").val(new Date(parseInt(data.DateOfMeterReading.substr(6))).toDateString());
                    },
                    error: function (xhr, event) {
                        console.log(xhr + " " + event);
                    }
                };

                $.ajax(options)
                //$.ajax(options).done(function(data){
                //    console.log(data);
                //});

                $.ajaxError(function (event, xhr) {
                    console.log(xhr.status + " : " + event.status); 
                });
            });

            $('#CurrentMeterReading').keyup(function (e) {
                CalculateAmount();
            });

            $("#PerUnitPrice").change(function () {
                CalculateAmount();
            });

            function CalculateAmount() {
                var perUnit = $('#PerUnitPrice').val();
                var meterReading = $('#CurrentMeterReading').val() - $('#PreviousMeterReading').val();
                console.log(meterReading);
                var calculatedAmount = perUnit * meterReading;
                console.log("Amount payable : " + calculatedAmount);

                $('.calculated-amount').text(meterReading + " * " + perUnit + " : " +calculatedAmount);
                $("#AmountPayable").val(calculatedAmount);

                if (!$.isNumeric(perUnit) && (!$.isNumeric(meterReading)))
                { $('.calculated-amount').text(calculatedAmount); }
            }

            $("#btnSubmit").click(function (e) {
                var dateOfMeterReading = $("#DateOfMeterReading").val();
                sessionStorage.setItem("DateOfMeterReading", dateOfMeterReading);
            });

        });
</script>
}

